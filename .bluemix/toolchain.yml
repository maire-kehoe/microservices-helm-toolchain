version: '2'
messages:
  $i18n: locales.yml
template:
  name:
    $ref: "#/messages/template.name"
  description:
    $ref: "#/messages/template.description"
  header: '![](toolchain.svg?localize)'
  icon: icon.svg
  required:
    - ui-build
    - catalog-api-build
    - orders-api-build
    - umbrella-build
    - catalog-api-repo
    - orders-api-repo
    - ui-repo
    - umbrella-repo
    - tekton-task-repo
    - tekton-pipeline-repo
  info:
    git url: >-
      [https://github.com/open-toolchain/microservices-helm-toolchain](https://github.com/open-toolchain/microservices-helm-toolchain)
    git branch: >-
      [master](https://github.com/open-toolchain/microservices-helm-toolchain/tree/master)
toolchain:
  template:
    getting_started:
      $ref: "#/messages/template.gettingStarted"
  name: 'helm-microservices-{{timestamp}}'
services:
  catalog-api-repo:
    service_id: hostedgit
    parameters:
      repo-name: '{{form.hostedgit.parameters.catalog-api-repo-name}}'
      repo-url: '{{form.hostedgit.parameters.catalog-api-repo-url}}'
      type: clone
      has_issues: false
      enable_traceability: true
  catalog-api-build:
    service_id: pipeline
    parameters:
      services:
        - catalog-api-repo # first one is the code repo
        - tekton-pipeline-repo
        - tekton-task-repo
      name: 'catalog-api-{{timestamp}}'
      type: tekton
      configuration:
        content:
          $text: ci.pipeline.yml
        env:
          tekton-pipeline-repo: tekton-pipeline-repo
          tekton-task-repo: tekton-task-repo
          source-repo: catalog-api-repo          
          policy-name: '[catalog-api] PUBLISH Component Chart Checks'
          git-branch: master
          app-name: catalog-api
          image-name: 'catalog-api-{{timestamp}}'
          registry-region-id: '{{form.pipeline.parameters.registry-region}}'
          registry-namespace: '{{form.pipeline.parameters.registry-namespace}}'
          api-key: '{{form.pipeline.parameters.api-key}}'            
          umbrella-repo-name: '{{form.hostedgit.parameters.umbrella-repo-name}}'
        execute: false
  orders-api-repo:
    service_id: hostedgit
    parameters:
      repo-name: '{{form.hostedgit.parameters.orders-api-repo-name}}'
      repo-url: '{{form.hostedgit.parameters.orders-api-repo-url}}'
      type: clone
      has_issues: false
      enable_traceability: true
  orders-api-build:
    service_id: pipeline
    parameters:
      services:
        - orders-api-repo # first one is the code repo
      name: 'orders-api-{{timestamp}}'
      configuration:
        content:
          $ref: ci.pipeline.classic.yml
          $refType: text
        env:
          POLICY_NAME: '[orders-api] PUBLISH Component Chart Checks'
          GIT_REPO: orders-api-repo
          GIT_BRANCH: master
          APP_NAME: orders-api
          IMAGE_NAME: 'orders-api-{{timestamp}}'
          REGISTRY_REGION_ID: '{{form.pipeline.parameters.registry-region}}'
          REGISTRY_NAMESPACE: '{{form.pipeline.parameters.registry-namespace}}'
          API_KEY: '{{form.pipeline.parameters.api-key}}'          
          UMBRELLA_REPO_NAME: '{{form.hostedgit.parameters.umbrella-repo-name}}'
        execute: false
  ui-repo:
    service_id: hostedgit
    parameters:
      repo-name: '{{form.hostedgit.parameters.ui-repo-name}}'
      repo-url: '{{form.hostedgit.parameters.ui-repo-url}}'
      type: clone
      has_issues: false
      enable_traceability: true
  ui-build:
    service_id: pipeline
    parameters:
      services:
        - ui-repo # first one is the code repo
      name: 'ui-{{timestamp}}'
      ui-pipeline: true
      configuration:
        content:
          $ref: ci.pipeline.classic.yml
          $refType: text
        env:
          POLICY_NAME: '[ui] PUBLISH Component Chart Checks'
          SAUCE_LABS: test
          GIT_REPO: ui-repo
          GIT_BRANCH: master
          APP_NAME: ui
          IMAGE_NAME: 'ui-{{timestamp}}'
          REGISTRY_REGION_ID: '{{form.pipeline.parameters.registry-region}}'
          REGISTRY_NAMESPACE: '{{form.pipeline.parameters.registry-namespace}}'
          API_KEY: '{{form.pipeline.parameters.api-key}}'            
          UMBRELLA_REPO_NAME: '{{form.hostedgit.parameters.umbrella-repo-name}}'
        execute: false
  # tekton-pipeline-repo:
  #   service_id: githubconsolidated
  #   parameters:
  #     # repo-name: tekton-pipelines
  #     # source-repo-url: https://github.com/hmagph/microservices-helm-toolchain
  #     repo_name: tekton-pipelines
  #     repo_url: https://github.com/maire-kehoe/microservices-helm-toolchain
  #     # source_repo_url: https://github.com/maire-kehoe/microservices-helm-toolchain

  #     # repo_name: 'hello-containers-{{timestamp}}'
  #     # repo_url: >
  #     #   $env.type === 'link' ? 
  #     #     $env.app_repo : 'https://github.com/open-toolchain/hello-containers'
  #     # source_repo_url: >
  #     #   $env.type === 'fork' || $env.type === 'clone' ? 
  #     #     $env.app_repo : 'https://github.com/open-toolchain/hello-containers'
  #     type: link
  #     has_issues: false
  #     enable_traceability: false
  tekton-task-repo:
    service_id: githubconsolidated
    parameters:
      # repo-name: tekton-catalog
      # source-repo-url: https://github.com/open-toolchain/tekton-catalog
      repo_name: tekton-catalog
      repo_url: https://github.com/open-toolchain/tekton-catalog
      # source_repo_url: https://github.com/maire-kehoe/tekton-catalog
      type: link
      has_issues: false
      enable_traceability: false
  umbrella-repo:
    service_id: hostedgit
    parameters:
      repo-name: '{{form.hostedgit.parameters.umbrella-repo-name}}'
      repo-url: '{{form.hostedgit.parameters.umbrella-repo-url}}'
      type: clone
      has_issues: true
      enable_traceability: true
  umbrella-build:
    service_id: pipeline
    parameters:
      services:
        - umbrella-repo # first one is the code repo
        - test
      name: 'solution-{{timestamp}}'
      ui-pipeline: true
      configuration:
        content:
          $ref: cd.pipeline.yml
          $refType: text
        env:
          SAUCE_LABS: test
          GIT_REPO: umbrella-repo
          GIT_BRANCH: master
          APP_NAME: '{{form.pipeline.parameters.umbrella-app-name}}'
          REGISTRY_REGION_ID: '{{form.pipeline.parameters.registry-region}}'
          REGISTRY_NAMESPACE: '{{form.pipeline.parameters.registry-namespace}}'
          API_KEY: '{{form.pipeline.parameters.api-key}}'          
          STAGING_RESOURCE_GROUP: '{{form.pipeline.parameters.staging-resource-group}}'
          STAGING_REGION_ID: '{{form.pipeline.parameters.staging-region}}'
          STAGING_CLUSTER_NAME: '{{form.pipeline.parameters.staging-cluster-name}}'
          STAGING_CLUSTER_NAMESPACE: '{{form.pipeline.parameters.staging-cluster-namespace}}'
          PROD_RESOURCE_GROUP: '{{form.pipeline.parameters.prod-resource-group}}'
          PROD_REGION_ID: '{{form.pipeline.parameters.prod-region}}'
          PROD_CLUSTER_NAME: '{{form.pipeline.parameters.prod-cluster-name}}'
          PROD_CLUSTER_NAMESPACE: '{{form.pipeline.parameters.prod-cluster-namespace}}'
          POLICY_NAME_FORMAT: '[%s] %s Deployment Checks'
        execute: false
  alerting:
    service_id: pagerduty
  dra:
    service_id: draservicebroker
    $ref: dra.yml
  messaging:
    service_id: slack
  test:
    service_id: saucelabs
  webide:
    service_id: orion
  registry:
    service_id: customtool
    parameters:
      type: Container Registry
      lifecyclePhase: "DELIVER"
      imageUrl:
        $ref: registry-logo.svg
        $refType: image-data-uri
      documentationUrl: https://cloud.ibm.com/docs/services/Registry/index.html
      name: Private repositories
      dashboard_url: https://cloud.ibm.com/containers-kubernetes/registry/private
      description: Manage your Docker images in private container registry
      additional-properties:    
  clusters:
    service_id: customtool
    parameters:
      type: Container Service
      lifecyclePhase: "RUN"
      imageUrl:
        $ref: container-service-logo.svg
        $refType: image-data-uri
      documentationUrl: https://cloud.ibm.com/docs/containers/container_index.html
      name: Clusters
      dashboard_url: https://cloud.ibm.com/containers-kubernetes/clusters
      description: Manage clusters
      additional-properties:  
form:
  pipeline:
    parameters:
      staging-space: staging
      staging-cluster-namespace: staging
      prod-space: prod
      prod-cluster-namespace: prod
      umbrella-app-name: '{{services.umbrella-repo.parameters.repo-name}}'
    schema:
      $ref: deploy.json
  hostedgit:
    parameters:
      catalog-api-repo-name: 'catalog-api-{{timestamp}}'
      catalog-api-repo-url: 'https://github.com/open-toolchain/Microservices_CatalogAPI_helm'
      orders-api-repo-name: 'orders-api-{{timestamp}}'
      orders-api-repo-url: 'https://github.com/open-toolchain/Microservices_OrdersAPI_helm'
      ui-repo-name: 'ui-{{timestamp}}'
      ui-repo-url: 'https://github.com/open-toolchain/Microservices_UI_helm'
      umbrella-repo-name: 'solution-{{timestamp}}'
      umbrella-repo-url: 'https://github.com/open-toolchain/Microservices_Solution_helm'
    schema:
      $ref: repos.json
